import cv2
import numpy as np
from glob import glob
import pathlib

def binary(image):
    ret, binary = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_TRIANGLE)
    # ret, binary = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
    # binary = cv2.adaptiveThreshold(image, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 5, 7)
    # print("threshold value %s"%ret)
    return binary

def gaussian_blur(image):
    kernel_size = (3, 3)
    sigma = 1.5
    return cv2.GaussianBlur(image, kernel_size, sigma)

def close_caculation(image):#先膨胀后腐蚀，去除前景中的噪点
    kernel = np.ones((9, 9), np.uint8)
    return cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)

def open_caculation(image):#先腐蚀后膨胀，去除背景噪点
    kernel = np.ones((9, 9), np.uint8)
    return cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)

def dilate(image):
    kernel = np.ones((7, 7), np.uint8)
    return cv2.dilate(image, kernel, iterations=1)

def erosion(image):
    kernel = np.ones((5, 5), np.uint8)
    return cv2.erode(image, kernel, iterations=1)

def show_image(image,name):
    # cv2.namedWindow(name, cv2.WINDOW_NORMAL)
    # if 'erosion' in name:
    if True:
        cv2.imshow(name, cv2.resize(image,(600,800)))
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        cv2.imwrite('./smart_img/'+name+'.jpg', image)

img_dir = './table1/'
for img_path in glob(img_dir+'*.jpg'):
    img_name = pathlib.PosixPath(img_path).stem
    image = cv2.imread(img_path, 0)
    image = binary(image)
    show_image(image, img_name+'bin')
    # image = gaussian_blur(image)
    # show_image(image, img_name+'gaussian')
    image = close_caculation(image)
    show_image(image, img_name+'close')
    image = open_caculation(image)
    show_image(image, img_name+'open')
    image = erosion(image)
    show_image(image, img_name + 'erosion')
    # image = dilate(image)
    # show_image(image,img_name+'dilate')
    # image = erosion(image)
    # show_image(image, img_name + 'erosion')
    #
    # image = erosion(image)
    # show_image(image, img_name + 'erosion')
    #
    # image = dilate(image)
    # show_image(image, img_name + 'dilate')
