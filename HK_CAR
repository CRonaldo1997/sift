import cv2
import time
import numpy as np
from time import time
from PIL import Image
import matplotlib.pyplot as plt

class ImageAlignment():

    def __init__(self):
        self.template = cv2.imread('./imgs/template.jpg')
        self.ROI = { 0: [260,500,620,560],
                     1: [260,610,820,666],
                     2: [260,708,1000,758],
                     3: [500,832,1000,888],
                     4: [420,940,800,989],
                     5: [390,1050,1020,1110],
                     6: [280,1385,800,1434],
                     7: [580,2650,990,2720],
                     8: [1040,2650,1110,2720],
                     9: [80,2855,900,3020],
                     10:[340,3070,810,3130],
                     11:[1820,370,2200,440],
                     12:[2337,368,2460,430],
                     13:[1810,509,2100,553],
                     14:[1900,964,2250,1020],
                     15:[1980,1195,2300,1246],
                     16:[2195,1660,2350,1720] }


    def sift_kp(self, image):
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        sift = cv2.xfeatures2d_SURF.create()
        kp, des = sift.detectAndCompute(image, None)
        kp_image = cv2.drawKeypoints(gray_image, kp, None)
        return kp_image, kp, des

    def get_good_match(self, des1, des2):
        bf = cv2.BFMatcher()
        matches = bf.knnMatch(des1, des2, k=2)
        good = []
        for m, n in matches:
            if m.distance < 0.5 * n.distance:
                good.append(m)
        return good

    def siftImageAlignment(self,img1, img2):
        _, kp1, des1 = self.sift_kp(img1)
        _, kp2, des2 = self.sift_kp(img2)
        goodMatch = self.get_good_match(des1, des2)
        #print('len of good match: ',len(goodMatch))
        if len(goodMatch) > 4:
            ptsA = np.float32([kp1[m.queryIdx].pt for m in goodMatch]).reshape(-1, 1, 2)
            ptsB = np.float32([kp2[m.trainIdx].pt for m in goodMatch]).reshape(-1, 1, 2)
            ransacReprojThreshold = 4
            H, status = cv2.findHomography(ptsA, ptsB, cv2.RANSAC, ransacReprojThreshold);
            imgOut = cv2.warpPerspective(img2, H, (img1.shape[1], img1.shape[0]),
                                         flags=cv2.INTER_LINEAR + cv2.WARP_INVERSE_MAP)
        return imgOut, H, status

    def show_result_img(self,aligned_img):
        img = Image.fromarray(aligned_img)
        plt.figure("Image") # 图像窗口名称
        plt.imshow(img)
        plt.axis('on') # 关掉坐标轴为 off
        plt.title('image') # 图像题目
        plt.show()

    def get_crop_img(self,target):
        aligned_img,_,_ = self.siftImageAlignment(self.template, target)
        #self.show_result_img(aligned_img)
        dic_len = len(self.ROI)
        crop_img_dict = {}
        for i in range(dic_len):
            x0 = self.ROI[i][0]
            x1 = self.ROI[i][2]
            y0 = self.ROI[i][1]
            y1 = self.ROI[i][3]
            crop_img = aligned_img[y0:y1,x0:x1]
            crop_img_dict[i] = crop_img
            cv2.imshow(str(i), crop_img)
            cv2.waitKey(0)
        return crop_img_dict


if __name__ == '__main__':
    target = cv2.imread('./imgs/target.jpg')
    start = time()
    imgAlignment = ImageAlignment()
    result_dict = imgAlignment.get_crop_img(target)
    end = time()
    print('time cost is :',end-start)

