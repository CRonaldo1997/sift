import os
import math
from glob import glob
import cv2
import numpy as np


thresh = 50
N = 2
wndname = "Square Detection Demo"

# helper function:
# finds a cosine of angle between vectors
# from pt0->pt1 and from pt0->pt2
def angle(pt1, pt2, pt0):
    pt1, pt2, pt0 = pt1[0], pt2[0], pt0[0]
    dx1 = math.fabs(pt1[0] - pt0[0])
    dy1 = math.fabs(pt1[1] - pt0[1])
    dx2 = math.fabs(pt2[0] - pt0[0])
    dy2 = math.fabs(pt2[1] - pt0[1])
    res = ((dx1*dx2 + dy1*dy2)/math.sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2+dy2*dy2) + 0.00000001))
    return res

# returns sequence of squares detected on the image.
# the sequence is stored in the specified memory storage
def findSquares(image):
    '''
    down-scale and upscale the image to filter out the noise
    pyrDown(image, pyr, Size(image.cols/2, image.rows/2))
    pyrUp(pyr, timg, image.size())
    '''

    squares = []

    #blur will enhance edge detection
    timg = cv2.medianBlur(image, 5)

    gray0 = np.zeros(timg.shape, dtype=np.uint8)
    # find squares in every color plane of the image
    for c in range(0, 3):
        cv2.mixChannels([timg], [gray0], [c, 0])

        # try several threshold levels
        for l in range(0, N):
            # hack: use Canny instead of zero threshold level.
            # Canny helps to catch squares with gradient shading
            if l == 0:
                # apply Canny. Take the upper threshold from slider
                # and set the lower to 0 (which forces edges merging)
                gray = cv2.Canny(gray0, 5, thresh, 5)
                # dilate canny output to remove potential
                # holes between edge segments
                kernel = np.ones((3, 3), dtype=np.uint8)
                gray = cv2.dilate(gray, kernel=kernel, anchor=(-1,-1))
            else:
                # apply threshold if l!=0:
                # tgray(x,y) = gray(x,y) < (l+1)*255/N ? 255 : 0
                tmp = gray0.sum(axis=2)
                gray = tmp >= (l+1)*255/N
                gray = np.asarray(gray, dtype=np.uint8)
                gray = gray * 255

            # find contours and store them all as a list
            # _, contours, _ = cv2.findContours(gray, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
            contours, _ = cv2.findContours(gray, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

            # test each contour
            for i in range(0, len(contours)):
                # approximate contour with accuracy proportional
                # to the contour perimeter
                epsilon = cv2.arcLength(contours[i], True)*0.02
                approx = cv2.approxPolyDP(contours[i], epsilon, True)

                # square contours should have 4 vertices after approximation
                # relatively large area (to filter out noisy contours)
                # and be convex.
                # Note: absolute value of an area is used because
                # area may be positive or negative - in accordance with the
                # contour orientation
                if len(approx) == 4 and math.fabs(cv2.contourArea(approx)) > 1000 and cv2.isContourConvex(approx):
                    maxCosine = 0

                    for j in range(2, 5):
                        # find the maximum cosine of the angle between joint edges
                        cosine = math.fabs(angle(approx[j%4], approx[j-2], approx[j-1]))
                        maxCosine = max(maxCosine, cosine)

                    # if cosines of all angles are small
                    # (all angles are ~90 degree) then write quandrange
                    # vertices to resultant sequence
                    if maxCosine < 0.3:
                        squares.append(approx)

    return squares


# the function draws all the squares in the image
def drawSquares(image, squares):
    for i in range(len(squares)):
        p = squares[i][0][0]
        # dont detect the border
        if p[0] > 3 and p[1] > 3:
            sqr = np.transpose(squares[i], axes=(1,0,2))
            cv2.polylines(image, sqr, True, (0,255,0), 3, cv2.LINE_AA)

    cv2.imshow(wndname, cv2.resize(image,(800,600)))
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    return

if __name__ == '__main__':
    img_path = './invoice/*.jpg'
    # names = ["imgs/2stickies.jpg", "imgs/manyStickies.jpg"]
    img_list = glob(img_path)
    for img_dir in img_list:
        # img = cv2.imread(os.path.join(img_path, name), 1)
        # if img is None:
        #     continue
        img = cv2.imread(img_dir,1)
        counters = findSquares(img)
        drawSquares(img, counters)
        # cv2.waitKey(0)
